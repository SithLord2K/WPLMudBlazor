@page "/schedule"
@attribute [StreamRendering]
@using Schedules = WPLMudBlazor.Data.Models.Schedule
@using WPLMudBlazor.Data.Services
@inject NavigationManager navigationManager

<PageTitle>Schedule</PageTitle>

            Select date to jump to that week:
<Addons>
    <Addon AddonType="AddonType.Body">
        <DatePicker @ref="@datePicker"
                    TValue="DateOnly"
                    DisabledDays="@disabledDays"
                    DateChanged="@SelectedDate"
                    Date="@selectedDate"
                    ReadOnly="true"
                    DisplayFormat="MMMM dd, yyyy" />
    </Addon>
    <Addon AddonType="AddonType.End">
        <Button Color="Blazorise.Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
            <Icon Name="IconName.Calendar" />
        </Button>
    </Addon>
</Addons>
<br />
            @foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == false))
{
    <anchor id="@day.Date" />
    <Anchor To="" />
    <Card>
        <CardBody>
            <CardTitle Size="4"></CardTitle>
            <CardText TextAlignment="TextAlignment.Center">
                <h3>@day.Date.ToLongDateString()</h3>
                <h4>Week: @day.Week_Id</h4>
                <Table Striped
                       Bordered
                       Responsive>
                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                        <TableRow>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Win</TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Home Team</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Away Team</TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Win</TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Table Number</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    @foreach (var d in schedules.Where(x => x.Date == day.Date))
                    {
                        <TableBody>
                            @if (teams != null)
                            {
                                <TableRow>
                                    <TableRowCell TextAlignment="TextAlignment.Center"><Check Checked="@HomeWinChecked(d.Week_Id, d.Home_Team).Result" Disabled /></TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Home_Team).First().TeamName</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">vs</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Away_Team).First().TeamName</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center"><Check Checked="@AwayWinChecked(d.Week_Id, d.Away_Team).Result" Disabled /></TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@d.Table_Number</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    }
                </Table>
            </CardText>
        </CardBody>
    </Card>
    <br />
}


<ScrollToTop />




@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private readonly RosterHelper rosterHelper;
    private readonly TeamHelper teamHelper;
    private readonly WeekHelper weekHelper;
    private readonly DataFactory aPIService;
    private List<Schedules> schedules = [];
    private List<TeamDetail> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private WeekFullInfo? homeWeek = new();
    private DayOfWeek[] disabledDays = [];
    private DatePicker<DateOnly> datePicker { get; set; }
    public DateOnly selectedDate = new();

    public LeagueSchedule(RosterHelper rosterHelper, TeamHelper teamHelper, WeekHelper weekHelper, DataFactory aPIService)
    {
        this.rosterHelper = rosterHelper;
        this.teamHelper = teamHelper;
        this.weekHelper = weekHelper;
        this.aPIService = aPIService;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        disabledDays = new[]
        {
            DayOfWeek.Sunday,
            DayOfWeek.Monday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday
        };
        teams = await aPIService.GetTeamDetails();
        schedules = await rosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        await loadingIndicator.Hide();

    }

    async Task<bool> HomeWinChecked(int WeekId, int HomeId)
    {
        await loadingIndicator.Show();
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Home_Team == HomeId && x.WinningTeamId == HomeId).FirstOrDefault();
        if (homeWeek == null)
        {
            await loadingIndicator.Hide();
            return false;
        }
        if (homeWeek.WinningTeamId == HomeId)
        {
            await loadingIndicator.Hide();
            return true;
        }
        else
        {
            await loadingIndicator.Hide();
            return false;
        }

    }

    async Task<bool> AwayWinChecked(int WeekId, int AwayId)
    {
        await loadingIndicator.Show();
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Away_Team == AwayId && x.WinningTeamId == AwayId).FirstOrDefault();

        if (homeWeek == null)
        {
            await loadingIndicator.Hide();
            return false;
        }
        if (homeWeek.WinningTeamId == AwayId)
        {
            await loadingIndicator.Hide();
            return true;
        }
        else
        {
            await loadingIndicator.Hide();
            return false;
        }
    }

    private void SelectedDate(DateOnly selectedDate)
    {
        string uri = navigationManager.Uri.ToString();
        if (!uri.Contains("#"))
        {
            uri = uri + "#";
        }
        navigationManager.NavigateTo($"{uri}{selectedDate}");
    }

}
