@page "/rosters"
@attribute [StreamRendering]
@using Roster = WPLMudBlazor.Data.Models.Roster

<PageTitle>Team Rosters</PageTitle>

<Anchor id="top" />
@if (teams is not null)
{
    <Card Border="Border.Is0">
        <Table Bordered Striped Responsive>
            <TableHeader Border="Border.Is1" Width="Width.Auto">
            </TableHeader>
            @foreach (var team in teams)
            {
                @if (team.TeamName == "Bye")
                {
                    continue;
                }
                <TableBody Width="Width.Auto">
                    <TableRowGroup Title="@team.TeamName">
                        <TableHeaderCell TextAlignment="TextAlignment.Center">Name</TableHeaderCell>
                        <TableHeaderCell TextAlignment="TextAlignment.Center">Games Played</TableHeaderCell>
                        <TableHeaderCell TextAlignment="TextAlignment.Center">Captain?</TableHeaderCell>
                        @foreach (var roster in rosters.Where(x => x.TeamId == team.Id))
                        {
                            <TableRow>
                                <TableRowCell TextAlignment="TextAlignment.Center">@roster.Player_Name</TableRowCell>
                                @if (players is not null)
                                {
                                    <TableRowCell TextAlignment="TextAlignment.Center">@players.Where(x => x.Id == roster.Player_Id).First().GamesPlayed</TableRowCell>
                                }
                                @if (roster.Player_Id == roster.Captain_Player_Id)
                                {
                                    <TableRowCell TextAlignment="TextAlignment.Center"><Icon Name="IconName.Check" /></TableRowCell>
                                }
                                else
                                {
                                    <TableRowCell></TableRowCell>
                                }
                            </TableRow>
                        }
                    </TableRowGroup>
                </TableBody>
            }
        </Table>
    </Card>

    <ScrollToTop />

}

@code {
    [CascadingParameter]
    LoadingIndicator loadingIndicator { get; set; } = new();

    private List<Players>? players = [];
    private List<TeamDetail> teams = [];
    private List<Roster> rosters = [];

    //Inject Services
    private readonly RosterHelper rosterHelper;
    private readonly PlayerHelpers playerHelpers;
    private readonly DataFactory aPIService;
    public TeamRosters(DataFactory aPIService, RosterHelper rosterHelper, PlayerHelpers playerHelpers)
    {
        this.aPIService = aPIService;
        this.rosterHelper = rosterHelper;
        this.playerHelpers = playerHelpers;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        players = await playerHelpers.ConsolidatePlayer();
        teams = await aPIService.GetTeamDetails();
        rosters = await rosterHelper.GetRoster();
        await loadingIndicator.Hide();
    }
}
