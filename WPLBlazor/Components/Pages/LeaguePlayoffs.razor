@page "/playoffs"
@attribute [StreamRendering]
@using Schedules = WPLMudBlazor.Data.Models.Schedule
@using WPLMudBlazor.Data.Services
@inject DataFactory aPIService
@inject NavigationManager navigationManager

<PageTitle>Playoffs Schedule</PageTitle>

@foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == true))
{
    <Card Padding="Padding.Is2">
        <CardBody>
            <CardTitle>

            </CardTitle>
            <CardText TextAlignment="TextAlignment.Center">
                <h3>@day.Date.ToLongDateString()</h3>
                <h4>Week: @day.Week_Id_Playoff</h4>
                <Table Striped Bordered Responsive>
                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                        <TableRow>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Home Team</TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center"></TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Away Team</TableHeaderCell>
                            <TableHeaderCell TextAlignment="TextAlignment.Center">Table #</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    @foreach (var d in schedules.Where(x => x.Playoffs == true))
                    {
                        <TableBody>
                            @if (teams != null)
                            {
                                <TableRow>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Home_Team).First().TeamName</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">vs</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Away_Team).First().TeamName</TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.Center">@d.Table_Number</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    }
                </Table>
            </CardText>
        </CardBody>
    </Card>
}

<ScrollToTop />

@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private readonly RosterHelper RosterHelper;
    private readonly TeamHelper teamHelper;
    private readonly WeekHelper weekHelper;
    private List<Schedule> schedules = [];
    private List<TeamDetail> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private WeekFullInfo? homeWeek = new();

    public LeaguePlayoffs(RosterHelper rosterHelper, TeamHelper teamHelper, WeekHelper weekHelper)
    {
        RosterHelper = rosterHelper;
        this.teamHelper = teamHelper;
        this.weekHelper = weekHelper;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        teams = await aPIService.GetTeamDetails();
        schedules = await RosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        await loadingIndicator.Hide();

    }
}
