@using WPLMudBlazor.Data.Models
@using WPLMudBlazor.Data.Services
@using WPLMudBlazor.Data.Models
@using WPLMudBlazor.Data.Services
@attribute [StreamRendering]

<Form>
    <Field>
        <Field ColumnSize="ColumnSize.IsFull">
            <Select TValue="int" SelectedValue="@player.Id" SelectedValueChanged="@LoadPlayer">
                <SelectItem>Choose Player To Add Games To</SelectItem>
                @if (players is not null)
                {
                    @foreach (var p5 in players)
                    {
                        <SelectItem Value="@p5.Id">@p5.FirstName @p5.LastName</SelectItem>
                    }
                }
            </Select>
        </Field>
    </Field>
    <Field>
        <Field ColumnSize="ColumnSize.IsFull">
            <FieldLabel>Player Name:</FieldLabel>
            @if (player is not null)
            {
                <FieldBody>
                    <TextEdit @bind-Text="@player.FirstName" Disabled />
                    <NumericPicker @bind-Value="@player.Id" hidden />
                </FieldBody>
            }
        </Field>
    </Field>
    @if (playerData is not null)
    {
        <Field>
            <FieldLabel>Week Number:</FieldLabel>
            <FieldBody>
                <NumericPicker @bind-Value="@playerData.WeekNumber" onchange="@DoesWeekExist()" Min="0" />
            </FieldBody>
        </Field>
        <Fields>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Games Won:</FieldLabel>
                <FieldBody>
                    <NumericPicker @bind-Value="@playerData.GamesWon" onchange="@GamesPlayedCalc()" Min="0" />
                </FieldBody>
            </Field>
            <Field ColumnSize="ColumnSize.IsHalf">
                <FieldLabel>Games Lost:</FieldLabel>
                <FieldBody>
                    <NumericPicker @bind-Value="@playerData.GamesLost" onchange="@GamesPlayedCalc()" Min="0" />
                </FieldBody>
            </Field>
        </Fields>
        <Field>
            <FieldLabel>Games Played:</FieldLabel>
            <FieldBody>
                <NumericPicker Value="@total" Disabled />
            </FieldBody>
        </Field>
    }
    <Field>
        <FieldBody>
            <Button Color="Color.Success" Clicked="@AddPlayerDataClicked">Save Player Games</Button>&nbsp;
            <Button Color="Color.Danger" Type="Blazorise.ButtonType.Reset">Reset</Button>
        </FieldBody>
    </Field>
</Form>


<!--Toaster-->
<Toaster>
    <Toast @bind-Visible="@toastVisible">
        <ToastHeader>
            <Strong Margin="Margin.IsAuto.FromEnd">@toastTitle</Strong>
            <CloseButton />
        </ToastHeader>
        <ToastBody>
            @toastMessage
        </ToastBody>
    </Toast>
</Toaster>

@code {
    private Player player { get; set; } = new();
    [Inject] private IToastService? ToastService { get; set; }

    //Lists
    private List<TeamDetail> teams = [];
    private List<Player> players = [];
    private List<PlayerData>? pData = [];

    //Toast
    private bool toastVisible = false;
    private string? toastMessage;
    private string? toastTitle;

    //Services
    private readonly DataFactory apiService;
    private readonly PlayerHelpers playerHelper;
    private readonly WeekHelper weekHelper;

    //Variables
    private int total;
    private PlayerDatum playerData = new();

    public AddEditPlayerDataModal(PlayerHelpers playerHelper, WeekHelper weekHelper, DataFactory apiService)
    {
        this.apiService = apiService;
        this.playerHelper = playerHelper;
        this.weekHelper = weekHelper;
    }

    protected override async Task OnInitializedAsync()
    {
        players = await apiService.GetPlayers();
        teams = await apiService.GetTeamDetails();
    }

    async Task AddPlayerDataClicked()
    {
        if (playerData is not null)
        {
            playerData.GamesPlayed = total;
            playerData.PlayerId = player.Id;
            var response = await apiService.SavePlayerData(playerData);
            if (response)
            {
                toastMessage = $"{player.FirstName} {player.LastName}'s Games Added/Edited.";
                toastTitle = "Add/Edit Player Games";
                toastVisible = true;
            }
            else
            {
                toastMessage = $"Failed to Add/Edit Player {player.FirstName} {player.LastName}'s Games.";
                toastTitle = "Add/Edit Player Games";
                toastVisible = true;
            }
        }
    }

    async Task LoadPlayer(int value)
    {
        var players = await apiService.GetPlayers();
        pData = await apiService.GetPlayerData_All();
        if (players is not null)
        {
            player = players.Where(e => e.Id == value).FirstOrDefault();
            playerData.WeekNumber = pData.Where(x => x.PlayerId == player.Id).OrderBy(c => c.WeekNumber).Last().WeekNumber + 1;
        }
    }

    Task DoesWeekExist()
    {
        if (pData is not null)
        {
            if (pData.Where(x => x.WeekNumber == playerData.WeekNumber && x.PlayerId == player.Id).Count() != 0)
            {
                playerData.GamesWon = pData.Where(x => x.PlayerId == player.Id && x.WeekNumber == playerData.WeekNumber).First().GamesWon;
                playerData.GamesLost = pData.Where(x => x.PlayerId == player.Id && x.WeekNumber == playerData.WeekNumber).First().GamesLost;
            }
        }
        return Task.CompletedTask;
    }

    Task GamesPlayedCalc()
    {
        if (playerData is not null)
        {
            total = playerData.GamesWon + playerData.GamesLost;
        }
        return Task.CompletedTask;
    }

    //Toast Service
    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }
}
