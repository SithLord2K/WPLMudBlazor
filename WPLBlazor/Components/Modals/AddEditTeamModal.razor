@using WPLMudBlazor.Data.Models
@using WPLMudBlazor.Data.Services
@attribute [StreamRendering]

<Form>
    <Field>
        <Field ColumnSize="ColumnSize.IsFull">
            @if (addTeam is not null)
            {
                <Select TValue="int" SelectedValue="@addTeam.Id" SelectedValueChanged="@LoadTeam">

                    <SelectItem>Choose Team to Edit</SelectItem>
                    @if (teams is not null)
                    {
                        @foreach (var team in teams)
                        {
                            <SelectItem Value="@team.Id">@team.TeamName</SelectItem>
                        }
                    }
                </Select>
            }
        </Field>
    </Field>
    <Field>
        @if (addTeam is not null)
        {
            <Field ColumnSize="ColumnSize.IsFull">
                <FieldLabel>Team Name:</FieldLabel>
                <FieldBody><TextEdit @bind-Text="@addTeam.TeamName" /></FieldBody>
            </Field>
            <Field ColumnSize="ColumnSize.IsFull">
                <FieldLabel>Team Captain:</FieldLabel>
                <FieldBody>
                    <Select TValue="int" SelectedValue="@addTeam.Captain_Player_Id" SelectedValueChanged="@TeamCaptainSelected">
                        <SelectItem>Select A Captain</SelectItem>
                        @if (players is not null)
                        {
                            @foreach (var p in players)
                            {
                                <SelectItem Value="@p.Id">@p.FirstName @p.LastName</SelectItem>
                            }
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field>
                <FieldBody>
                    <Button Color="Color.Success" Clicked="@AddTeamClicked">Save Team</Button>&nbsp;
                    <Button Color="Color.Danger" Type="Blazorise.ButtonType.Reset">Reset</Button>
                </FieldBody>
            </Field>
        }
    </Field>
</Form>

<!--Toaster-->
<Toaster>
    <Toast @bind-Visible="@toastVisible">
        <ToastHeader>
            <Strong Margin="Margin.IsAuto.FromEnd">@toastTitle</Strong>
            <CloseButton />
        </ToastHeader>
        <ToastBody>
            @toastMessage
        </ToastBody>
    </Toast>
</Toaster>

@code {
    private Player player { get; set; } = new();
    [Inject] private IToastService? ToastService { get; set; }

    //Variables
    private TeamDetail addTeam = new();

    //Lists
    private List<TeamDetail> teams = [];
    private List<Player> players = [];

    //Toast
    private bool toastVisible = false;
    private string? toastMessage;
    private string? toastTitle;

    //Services
    private readonly DataFactory apiService;
    private readonly PlayerHelpers playerHelper;
    private readonly WeekHelper weekHelper;

    public AddEditTeamModal(PlayerHelpers playerHelper, WeekHelper weekHelper, DataFactory apiService)
    {
        this.apiService = apiService;
        this.playerHelper = playerHelper;
        this.weekHelper = weekHelper;
    }

    protected override async Task OnInitializedAsync()
    {
        players = await apiService.GetPlayers();
        teams = await apiService.GetTeamDetails();
    }

    async Task LoadTeam(int value)
    {
        var teams1 = await apiService.GetTeamDetails();
        players = await apiService.GetPlayers();
        if (teams1 is not null)
        {
            addTeam = teams1.Where(e => e.Id == value).FirstOrDefault();
        }

    }

    Task TeamCaptainSelected(int value)
    {
        if (addTeam is not null)
        {
            addTeam.Captain_Player_Id = value;
        }
        return Task.CompletedTask;
    }

    async Task AddTeamClicked()
    {
        var t = await apiService.GetTeamDetails();
        if (addTeam is not null)
        {
            var response = await apiService.AddTeam(addTeam);
            if (response)
            {
                toastMessage = $"Team {addTeam.TeamName} has been added or edited.";
                toastTitle = "Add/Edit Team";
                toastVisible = true;
            }
            else
            {
                toastMessage = $"Failed to Add Team {addTeam.TeamName}.";
                toastTitle = "Add/Edit Team";
                toastVisible = true;
            }
        }
    }

    //Toast Service
    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }
}
